#!/bin/bash
#
# Unpacks one of several different types of archive to the current
# directory.  If there is more than one entry in the top-level
# directory, automatically creates a new subdirectory and unpacks to
# that, in order to avoid filling the current directory with crap.
# In every case, informs the user where the unpacked contents ended up.
#
# Adam Spiers <shell-hacks@adamspiers.org>

me="`basename $0`"

warn () {
    echo >&2 "$*"
}

die () {
    warn "$*"
    exit 1
}

abort () {
    die "$*; aborting."
}

progress () {
    echo "$*"
}

usage () {
    cat <<EOF >&2
Usage: $me ARCHIVE
EOF
    exit 1
}

if [ "$1" == -h ] || [ "$1" == --help ] || [ -z "$1" ]; then
    usage
fi

archive_path="$1"
archive="`basename \"$1\"`"

if ! [ -e "$archive_path" ]; then
    abort "$archive_path does not exist"
fi

ideal_dest=
case "$archive" in
    *.tar|*.tgz|*.tbz|*.txz|*.zip|*.Zip|*.ZIP|*.apk|*.rar|*.xpi|*.jar|*.sar|*.class|*.job|*.pylib|*.gem)
        ideal_dest="${archive%.*}"
        ;;
    *.tar.gz)
        ideal_dest="${archive%.tar.gz}"
        ;;
    *.tar.bz2)
        ideal_dest="${archive%.tar.bz2}"
        ;;
    *.tar.xz)
        ideal_dest="${archive%.tar.xz}"
        ;;
    *.7z)
        ideal_dest="${archive%.7z}"
        ;;
    *)
        abort "$archive does not have a supported file extension"
        ;;
esac

if ! tmpdir=`mktemp -d "$ideal_dest.tmp.XXXXXXXX"`; then
    die "mktemp failed: $!"
fi

case "$archive" in
    *.tar)
        tar -C "$tmpdir" -xvf "$archive_path"
        ;;
    *.tar.gz|*.tgz)
        tar -C "$tmpdir" -zxvf "$archive_path"
        ;;
    *.tar.bz2|*.tbz)
        tar -C "$tmpdir" -jxvf "$archive_path"
        ;;
    *.tar.xz|*.txz)
        tar -C "$tmpdir" -Jxvf "$archive_path"
        ;;
    *.zip|*.ZIP|*.Zip|*.xpi|*.jar|*.class|*.sar|*.job|*.pylib|*.apk)
        unzip -d "$tmpdir" "$archive_path"
        ;;
    *.7z)
        7za x -o"$tmpdir" "$archive_path"
        ;;
    *.gem)
        gem unpack --target="$tmpdir" "$archive_path"
        ;;
    *.rar)
        archive_abspath=$( abs "$archive_path" )
        pushd "$tmpdir"
        unrar x "$archive_abspath"
        popd
        ;;
    *)
        abort "$archive is not a supported archive format"
        ;;
esac
if [ $? != 0 ]; then
    abort "Unpack of $archive_path failed"
fi

dirents=$( ls -A "$tmpdir" | wc -l )

if [ "$dirents" -eq 0 ]; then
    die "$archive was empty?  Aborting"
fi

if [ "$dirents" -gt 1 ]; then
    # Naughty archive creator!  Would cause a mess if unpacked to cwd.
    src="$tmpdir"
    progress "$archive had more than one top-level entry"
else
    top_dirent=$( ls -A "$tmpdir" )
    src="$tmpdir/$top_dirent"
    progress "$archive is clean"
    if ! [ -e "$top_dirent" ]; then
        if mv "$src" .; then
            progress "Look inside $top_dirent"
            rmdir "$tmpdir"
            exit 0
        else
            abort "mv $src . failed"
        fi
    else
        warn "$top_dirent already exists"
    fi
fi

if ! [ -e "$ideal_dest" ]; then
    # safe to use ideal choice of destination directory
    dest="$ideal_dest"
else
    warn "Ideal destination $ideal_dest already exists"
    dest="$archive.unpacked"
    if [ -e "$dest" ]; then
        warn "$dest also already exists"
        # Couldn't find a better place to move unpacked directory to, so
        # leave it where it already is.
        dest="$src"
    fi
fi

if [ "$src" != "$dest" ]; then
    #progress "mv $src $dest OK"
    if ! mv "$src" "$dest"; then
        abort "mv $src $dest failed"
    fi
    [ -d "$tmpdir" ] && rmdir "$tmpdir"
fi

progress "Look inside $dest"
exit 0

