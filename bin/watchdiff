#!/usr/bin/perl
#
# watchdiff - like watch(1), but output in diff format
#
# Copyright (c) 2010 Adam Spiers <adam@spiers.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# See also dwatch, also by me, which does a very similar thing but
# caches in order to allow diffs to span invocations.

use strict;
use warnings;

use File::Copy;
use File::Spec;
use File::Temp qw(tempfile);
use Getopt::Long;
use IPC::Open2;
use Time::HiRes qw(sleep);

$| = 1;

my $DEFAULT_INTERVAL = 2.0;
my $tmpdir = File::Spec->tmpdir;
my ($old_fh, $old_fn) = tempfile("watchdiff-$$-old-XXXXXXXXXXXXXXX", DIR => $tmpdir);
my ($new_fh, $new_fn) = tempfile("watchdiff-$$-new-XXXXXXXXXXXXXXX", DIR => $tmpdir);
$SIG{INT} = \&clean_up;

my $columns = $ENV{COLUMNS} || (`stty -a -F /dev/stderr` =~ /columns (\d+)/)[0];

sub usage {
  warn @_, "\n" if @_;

  (my $ME = $0) =~ s,.*/,,;

  die <<EOUSAGE;
Usage: $ME [OPTIONS] CMD [ARGS]
Options:
  -h, --help           Show this help
  -n, --interval=N     Run command every N seconds (default $DEFAULT_INTERVAL)
  -d, --clear          Clear screen before displaying each diff
  -c, --cumulative     Show cumulative differences
EOUSAGE
}

sub parse_opts {
  Getopt::Long::Configure('require_order');

  my %opts = ( interval => $DEFAULT_INTERVAL );
  GetOptions(
    \%opts,
    'help|h',
    'interval|n=f',
    'clear|d',
  ) or usage();
  usage() if @ARGV == 0 or $opts{help};

  return %opts;
}

sub run_command {
  my @args = @_;

  my ($stdin, $stdout);
  my $pid = open2($stdout, $stdin, @args);
  seek $new_fh, 0, 0;
  truncate $new_fh, 0;
  print $new_fh $_ while <$stdout>;
  waitpid $pid, 0;
}

{
  my $diff_count = 0;

  sub do_comparison {
    my ($opts) = @_;

    my $cmd = "diff -u $old_fn $new_fn";
    my $diff = `$cmd`;
    my $status = $? >> 8;
    die "$cmd failed; aborting.\n" if $status == 2;
    my $changed = $status == 1;

    return unless $changed;

    if ($opts->{clear}) {
      system 'clear';
    }
    else {
      print "=" x ($columns-1), "\n" if $diff_count++;
    }

    print $diff;
  }
}

sub main {
  my %opts = parse_opts();
  my $count = 0;

  while (1) {
    run_command(@ARGV);

    do_comparison(\%opts);

    copy($new_fn, $old_fn) if ! $opts{cumulative} or $count++ == 0;

    sleep $opts{interval};
  }
}

sub clean_up {
  close $old_fh;
  close $new_fh;
  unlink $old_fn, $new_fn;
  exit;
}

main();
