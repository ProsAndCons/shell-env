#!/usr/bin/env perl

=head1 NAME

uidle - output idle time for specified user

=head1 SYNOPSIS

$ uidle --help

=head1 DESCRIPTION

Finds the session with the smallest idle time corresponding to the
specified user and by default outputs the number of seconds idle.

uidle primarily relies on being able to extra idle time from the
C<atime> of the tty referred to in the C<ut_line> field of the C<utmp>
struct for active login sessions.

Some distros such as Fedora 16 seem to set a C<ut_line> field value
for the Xorg display which relates to one of the Linux virtual
consoles:

    $ who
    adam     tty1         2010-01-20 11:03 (:0)

However, distros such as openSUSE 12.2 instead write C<:0> to
the C<ut_line> field:

    $ who
    adam     :0           Oct  9 09:05 (console)

On older Fedora, the C<atime> of F</dev/tty1> would also be updated
even by a mere press of a Shift key on the :0 display (although not by
a mouse pointer movement).  This provided a helpful way of detecting
keyboard activity on the X console.

Unfortunately, on Fedora 16 and openSUSE 12.2, it seems that X
keyboard activity no longer updates the C<atime> of any
F</dev/tty[0-9]> device.  This leaves two avenues for obtaining
accurate idle time:

=over 4

=item * from idle times for individual ptys

This first can only work if urxvt/xterm etc. are setuid or setgid, so
they can update utmp.  By default, openSUSE does not ship them in this
way, so you need to make them so, e.g.

    chgrp utmp `which urxvt`
    chmod g+s  `which urxvt`

=item * x11idle

Alternatively, or in addition, ensure x11idle.c from org-mode's
contrib/scripts/ directory is compiled and installed on the C<$PATH>,
and then run C<uidle> with the C<-x> option.  This uses the F<Xss1>
library to give very accurate idle time; however, it counts mouse
pointer movement as activity, which with a twitchy mouse could
accidentally cause a machine shutdown in the middle of the night
if C<routine> is running.

=back

=head1 RETURN CODE

Returns success (zero) if an idle time was found, or failure (1)
otherwise.

=head1 AUTHOR

Adam Spiers <uidle@adamspiers.org>

=head1 SEE ALSO

L<routine>, L<active-since>, L<finger(1)>, L<utmp(5)>

=cut

1;

use strict;
use warnings;

use Date::Manip 'Delta_Format';
use File::Basename;
use File::stat;
use Getopt::Long;
use POSIX 'strftime';

my %opts = ( verbosity => 1 );

sub usage {
    my $me = basename $0;
    die <<EOUSAGE;
Usage: $me [options]

Finds the session with the smallest idle time corresponding to the
specified user and by default outputs the number of seconds idle.

Options:
  -l, --last        Output time last active as seconds since epoch
  -t, --tty         Output corresponding tty
  -i, --idle        with -l/-t: show time idle in addition to other output
  -h, --human       Output idle/last active time(s) in human-readable format
  -x, --x11idle     Use data from x11idle if available (spots mouse movement)
  -v, --verbose[=N] Increase [specify] verbosity (defaults to 1)
  -?, --help

If the output is not what you expect, read the man page / inline POD.
EOUSAGE
}

sub debug {
    my $level = shift;
    warn @_, "\n" if $opts{verbosity} >= $level;
}

sub run_x11idle {
    return '' unless $ENV{DISPLAY};
    chomp (my $out = `x11idle 2>&1` || '');
    return $out;
}

sub tty_idle {
    my ($tty) = @_;
    my $dev = "/dev/$tty";
    my $sb = stat($dev);
    if (! $sb) {
        # unknown idle time for this tty (could be :0 on SUSE)
        debug(3, "  couldn't stat $dev");
        return undef;
    }
    return time() - $sb->atime;
}

sub run_who {
    my $me = shift || scalar(getpwuid $<);

    my $cmd = "who";
    #my $cmd = "cat";
    open(WHO, "$cmd|") or die "open($cmd|) failed: $!\n";

    my ($least_idle_secs, $least_idle_tty);

    while (<WHO>) {
        chomp;
        my ($user, $tty) = split /\s+/;
        debug(2, "who: user $user, tty $tty");
        if ($user ne $me) {
            debug(2, "  skipping user $user, not $me");
            next;
        }
        my $idle_secs = tty_idle($tty);
        if (defined $idle_secs) {
            debug(2, "  idle for ${idle_secs}s on tty $tty");
        }
        else {
            debug(2, "  unknown idle time for tty $tty");
            next;
        }
        if (! defined $least_idle_secs or $idle_secs < $least_idle_secs) {
            $least_idle_secs = $idle_secs;
            $least_idle_tty = $tty;
        }
    }

    close(WHO);

    return ($least_idle_secs, $least_idle_tty);
}

sub get_time_idle {
    my ($least_idle_secs) = @_;
    my @units = Delta_Format(
        $least_idle_secs . 'S',
        0,
        map "%${_}v", qw{y M w d h m s},
    );
  
    my $i = 0;
    my @out;
    for my $unit (qw{year month week day hour minute second}) {
        if (my $val = $units[$i]) {
            my $out = "$val $unit";
            $out   .= "s" if $val != 1;
            push @out, $out;
        }
        $i++;
    }
    @out = ('0 seconds') if @out == 0;
    
    return "@out idle", 
}

sub output {
    my ($least_idle_secs, $least_idle_tty) = @_;

    my %out;
    $out{'idle'} = $opts{human} ? get_time_idle($least_idle_secs) : $least_idle_secs;
    $out{'last'} = time() - $least_idle_secs;
    $out{'last'} = "last active at " . scalar localtime($out{'last'})
        if $opts{human};
    $out{'tty'}  = $opts{human} ? "on $least_idle_tty" : $least_idle_tty;

    $opts{'idle'} = 1 unless ! $opts{idle} && ($opts{'last'} || $opts{'tty'});
    my @out;
    foreach (qw{idle tty last}) {
        push @out, $out{$_} if $opts{$_};
    }

    my $out = join(" ", @out);
    $out =~ s/ last active/,$&/;
    print "$out\n";
}

sub main {
    Getopt::Long::Configure('bundling');

    GetOptions(
        \%opts,
        'last|l', 'idle|i', 'human|h',
        'tty|t', 'x11idle|x',
        'verbosity|verbose|v:+',
        'help|?'
    ) or usage();
    usage() if $opts{help} or @ARGV;

    my ($least_idle_secs, $least_idle_tty) = run_who();

    if ($opts{x11idle}) {
        my $x11idle = run_x11idle();
        if ($x11idle =~ /^\d+$/) {
            $x11idle = int($x11idle / 1000);
            # Give a slight preference to tty-based idle times,
            # since they're more informative.
            if ($x11idle + 1 < ($least_idle_secs || 9999)) {
                $least_idle_secs = $x11idle;
                $least_idle_tty  = $ENV{DISPLAY} || 'x11';
            }
        }
    }

    if (! defined $least_idle_secs) {
        debug(1, "Didn't get any idle time; assuming not logged on.");
        exit 1;
    }

    output($least_idle_secs, $least_idle_tty);
}

main();
